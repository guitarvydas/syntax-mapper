Odin0D {
  program [item+] = ‛«item»’
  item [i] = ‛«i»’

  procDef [id s1 kcc s2 kinline? s3 kproc s4 formalList s5 karrow? s6? retList? shereclause? procBody] =
    ‛def «id»«formalList»\n(-«procBody»-)’

  whereclause [kwhere sp wherebody] = ‛’

  formalsList [lp formals* rp] = ‛«lp»self «formals»«rp»’
  formal_shorthand [s1 id kcomma] = ‛«id» ’
  formal_other [s1 id s2 kcolon s3 type] = ‛«id» ’
  formal_allocator [kallocator spaces1 kassign spaces2 kcontextdot id spaces3] = ‛’
  type [spaces1 typechar+ spaces2] = ‛«typechar»’
  typechar_parenthesized [lp typecharinner+ rp] = ‛«lp»«typecharinner»«rp»’
  typechar_bottom [c] = ‛«c»’
  typecharinner_parenthesized [lp typecharinner+ rp] = ‛«lp»«typecharinner»«rp»’
  typecharinner_bottom [c] = ‛«c»’
  retList_multiple [lp type* rp] = ‛«type»’
  retList_single [type] = ‛«type»’

  procbody [spaces lb bodychar+ rb] = ‛«bodychar»’
  bodychar_recursive [lb bodychar+ rb] = ‛«lb»«bodychar»«rb»’
  bodychar_comment [c] = ‛’
  bodychar_bottom [c] = ‛«c»’
  bodychar_string [s] = ‛«s»’
  wherebody [wbodychar+] = ‛«wbodychar»’
  wbodychar_comment [c] = ‛’
  wbodychar_bottom [c] = ‛«c»’
  wbodychar_string [s] = ‛«s»’

  id [idfirst idrest*] = ‛«idfirst»«idrest»’
  idfirst [c] = ‛«c»’
  idrest  [c] = ‛«c»’
  comment [kslsl c+] = ‛ ’
  comma [c] = ‛’
  string [dq1 cs* dq2] = ‛"«cs»"’
  dq [c] = ‛"’
}

