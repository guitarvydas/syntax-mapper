Odin0D {
  program = item+
  item =
    | procDef -- procdef
    | any -- other

  procDef = id spaces "::" spaces "proc" spaces formalsList spaces ("->" spaces retList)? procbody
  formalsList = "(" formal* ")"
  formal =
    | "allocator" spaces ":=" spaces "context." id spaces -- allocator
    | spaces id spaces ":" spaces type spaces -- other
  type = typechar+
  typechar =
    | "(" typecharinner+ ")" -- parenthesized
    | ~space ~"(" ~")" any -- bottom

  typecharinner =
    | "(" typecharinner+ ")" -- parenthesized
    | ~"(" ~")" any  -- bottom


  retList =
    | formalsList -- formalsList
    | typeList -- typeList
    | (~space ~id any)* id -- singleType

  typeList = "(" typecomma+ ")"
  typecomma =
    | type spaces comma spaces -- withcomma
    | type spaces -- last

  procbody = spaces "{" bodychar+ "}"
  bodychar =
    | string -- string
    | "{" bodychar+ "}" -- recursive
    | comment -- comment
    | ~"{" ~"}" any -- bottom

  id = idfirst idrest*
  idfirst = letter | "_"
  idrest = alnum | "_"
  comment = "//" (~"\n" any)+
  space += comment
  comma = ","
  string = dq (~dq any)* dq
  dq = "\""
}

